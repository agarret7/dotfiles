#!/bin/bash

mz () {
    curl 'http://musicazoo.mit.edu/nlp' -H 'Content-Type: text/json' --data-binary "[{\"cmd\":\"do\",\"args\":{\"message\":\"$1\"}}]";
    echo
}

crop () { convert -trim "$1" "$1"; }

md () { mkdir -p "$@" && cd "$1"; }

pathadd() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

ldlibrarypathadd() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$LD_LIBARY_PATH:" != *":$ARG:"* ]]; then
        LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$ARG"
    fi
  done
}

rdir() {
  cd ${1} && mv * .. && cd .. && rmdir ${1}
}

# Fast cd alternative, switches to directory based on a map from
# shortcuts to corresponding paths. To save your own shortcut, type
#
#   $ fd -s[f] [path] [shortcut]
#
# If you have the "f" option, the shortcut will be defined as a relative
# path instead of an absolute one. (This lets you define shortcuts like
# ... = ../.. which can be convenient.)
#
# To navigate to the corresponding shortcut, type
#
#   $ fd [shortcut]
#
# The shortcuts are all saved in ~/.fd-config
fd() {
  if [ $# -eq 0 ]; then
    cd
  elif [ $# -eq 1 ]; then
    # Navigating to a shortcut.
    declare -A loc
    # Read in all the shortcuts.
    while read line; do
      IFS=':' read -r -a key_value <<< $line
      loc["${key_value[0]}"]=${key_value[1]}
    done <~/.fd-config
    if [ -z "${loc[${1}]}" ]; then
      # If the provided shortcut doesn't exist...
      echo "Shortcut doesn't exist. Type \"fd -s[f] [path] [shortcut]\" to save it."
    else
      # Otherwise navigate to the corresponding shortcut.
      cd "${loc[${1}]}"
    fi
  elif [ $# -eq 3 -a $1 = "-s" ] || [ $1 = "-sf" ]; then
    # Saving a new shortcut.
    fd_config=~/.fd-config
    if [ $1 = "-s" ]; then
      file=$(readlink -f "${2}")
    else
      file=$2
    fi
    prev_key_line_num=$(grep -n "${3}:" $fd_config 2>/dev/null | cut -f1 -d: | head -n1)
    if [ -z $prev_key_line_num ]; then
      # If this is a new shortcut...
      echo "${3}:${file}" >> $fd_config;
    else
      # Otherwise, overwrite the previous shortcut.
      # Putting in escape characters.
      file=${file//\//\\/}     # Replace "/" with "\/"
      file=${file//\ /\\ }     # Replace " " with "\ "
      file=${file//\(/\\\(}    # Replace "(" with "\("
      file=${file//\)/\\\)}    # Replace ")" with "\)"
      # Overwriting actual line.
      sed -i "${prev_key_line_num}s/.*/${3}:${file}/" ${fd_config}
    fi
  else
    echo "Invalid parameters. Type \"fd [shortcut]\" to navigate to a shortcut, or \"fd -s[f] [path] [shortcut]\" to save a new one."
  fi
}

# Credit for functions below: 
# https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789

# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@"
}

# Open man page as PDF
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Extract many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}
